name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run unit tests
      run: mvn test -Dtest="!*IntegrationTest"

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results
        path: target/surefire-reports/

    - name: Publish integration test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Integration Test Results
        path: target/surefire-reports/*.xml
        reporter: java-junit
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run integration tests
      run: mvn test -Dtest="*IntegrationTest"

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: target/surefire-reports/

    - name: Publish integration test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Integration Test Results
        path: target/surefire-reports/*.xml
        reporter: java-junit

  static-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: java

    - name: Compile application
      run: mvn compile

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

    - name: Run SpotBugs
      run: mvn spotbugs:check -Dspotbugs.effort=Max -Dspotbugs.threshold=Low
      continue-on-error: true

    - name: Upload SpotBugs results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: spotbugs-results
        path: target/spotbugsXml.xml

  vulnerability-scan:
    name: Vulnerability Scanning
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run OWASP Dependency Check
      run: mvn org.owasp:dependency-check-maven:check
      continue-on-error: true

    - name: Upload OWASP results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: owasp-dependency-check-results
        path: target/dependency-check-report.html

    - name: Install Snyk CLI
      run: |
        curl -Lo snyk https://static.snyk.io/cli/latest/snyk-linux
        chmod +x snyk
        sudo mv snyk /usr/local/bin/
      continue-on-error: true

    - name: Run Snyk to check for vulnerabilities
      run: |
        if [ -n "${{ secrets.SNYK_TOKEN }}" ]; then
          snyk auth ${{ secrets.SNYK_TOKEN }}
          snyk test --severity-threshold=high --json > snyk.json || true
        else
          echo "Snyk token not configured, skipping vulnerability scan"
          echo '{"vulnerabilities":[],"ok":true,"dependencyCount":0,"org":"unknown","policy":"# Snyk policies","isPrivate":false,"licensesPolicy":null,"packageManager":"maven","ignoreSettings":null,"summary":"No vulnerabilities found","remediation":{"unresolved":[],"upgrade":{},"patch":{},"ignore":{},"pin":{}},"filesystemPolicy":false,"filtered":{"ignore":[],"patch":[]},"uniqueCount":0,"projectName":"proxima","foundProjectCount":1}' > snyk.json
        fi
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    - name: Upload Snyk results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: snyk-results
        path: snyk.json

  build-and-package:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: always() && (needs.unit-tests.result == 'success' && needs.integration-tests.result == 'success')
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build application
      run: mvn clean package -DskipTests

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: target/*.jar

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository_owner | lower }}/proxima
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Save Docker image (for backup)
      run: |
        # Extract the SHA-based tag from the metadata output
        SHA_TAG=$(echo "${{ steps.meta.outputs.tags }}" | tr '\n' ' ' | grep -oE "ghcr\.io/[^[:space:]]+:[a-f0-9]{7}" | head -1)
        if [ -n "$SHA_TAG" ]; then
          docker pull $SHA_TAG
          docker save $SHA_TAG | gzip > proxima-image.tar.gz
        else
          # Fallback to latest tag if SHA tag not found
          docker pull ghcr.io/${{ github.repository_owner | lower }}/proxima:latest
          docker save ghcr.io/${{ github.repository_owner | lower }}/proxima:latest | gzip > proxima-image.tar.gz
        fi

    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: proxima-image.tar.gz